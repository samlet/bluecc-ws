plugins {
    id 'java'
    id 'application'
}

group 'com.bluecc.ws'
version '1.0-SNAPSHOT'

repositories {
    maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    maven{ url 'http://maven.aliyun.com/nexus/content/repositories/jcenter'}
    mavenCentral()
}

dependencies {
    implementation project(':common')

    // Adjust the armeria list as you need.
    ['armeria',
     'armeria-brave'].each {
        implementation "com.linecorp.armeria:${it}:1.7.0"
    }

    // https://mvnrepository.com/artifact/com.linecorp.armeria/armeria
    // implementation group: 'com.linecorp.armeria', name: 'armeria', version: '1.7.0'

    // Logging
    runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    runtimeOnly 'org.slf4j:log4j-over-slf4j:1.7.30'

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.1'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation group: 'com.google.guava', name: 'guava', version: '22.0'

//    compile group: 'com.uber.cadence', name: 'cadence-client', version: '2.6.3'
    compile group: 'com.uber.cadence', name: 'cadence-client', version: '3.0.0'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.9'

    compile group: 'com.uber.m3', name: 'tally-core', version: '0.10.0'
    compile group: 'com.uber.m3', name: 'tally-prometheus', version: '0.10.0'
    compile group: 'io.prometheus', name: 'simpleclient', version: '0.10.0'
    compile group: 'io.prometheus', name: 'simpleclient_httpserver', version: '0.10.0'

    // https://mvnrepository.com/artifact/net.sf.smc/smc
//    implementation group: 'net.sf.smc', name: 'smc', version: '7.2.0', ext: 'pom'
    // https://mvnrepository.com/artifact/net.sf.smc/library
    implementation group: 'net.sf.smc', name: 'library', version: '7.2.0'
    // https://mvnrepository.com/artifact/net.sf.smc/parser
    implementation group: 'net.sf.smc', name: 'parser', version: '7.2.0'
    // https://mvnrepository.com/artifact/net.sf.smc/generator
    implementation group: 'net.sf.smc', name: 'generator', version: '7.2.0'

    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    implementation 'com.couchbase.client:java-client:3.1.5'
    // https://mvnrepository.com/artifact/com.google.inject/guice
    implementation group: 'com.google.inject', name: 'guice', version: '5.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    testImplementation 'net.javacrumbs.json-unit:json-unit-fluent:2.25.0'
    testImplementation 'org.assertj:assertj-core:3.17.1'
}

tasks.withType(JavaCompile) {
    options.compilerArgs += '-parameters'
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
    options.debug = true
    options.compilerArgs += '-parameters'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

task(runSimple, dependsOn: 'classes', type: JavaExec) {
    main = 'com.bluecc.ws.charts.SimpleServer'
    classpath = sourceSets.main.runtimeClasspath
    args 'mrhaki'
    systemProperty 'simple.message', 'Hello '
}

application {
//    mainClassName = 'com.bluecc.ws.charts.SimpleServer'
//    mainClassName = 'com.bluecc.ws.charts.stuffs.Main'
    // ./gradlew run -PchooseMain=com.bluecc.ws.charts.stuffs.Main
    // ./gradlew run -PchooseMain=com.bluecc.ws.charts.SimpleClient

    // the command line arguments can be passed with --args. For example,
    // if you want to launch the application with command line arguments foo --bar,
    // you can use gradle run --args="foo --bar"
    // âŠ• [The Application Plugin](https://docs.gradle.org/current/userguide/application_plugin.html)
    mainClassName = project.findProperty("chooseMain").toString()
}

